#include <avr/io.h>

void _pwm_init(void);
void _pwm_fwd(void);
void _pwm_fwd_left(void);
void _pwm_fwd_right(void);
void _pwm_fwd(void);
void _pwm_rvs_left(void);
void _pwm_rvs_right(void);
void _pwm_rvs(void);
void _pwm_left(void);
void _pwm_right(void);

int main(void)
{
	_pwm_init();
	_pwm_fwd();
	while(1);
}

void _pwm_init(void)
{
    DDRB |=_BV(PB3)|_BV(PB4);
    OCR0A = 64;									//set duty cycle
	OCR0B = 64;
    OCR0A = 128;															//set duty cycle
	OCR0B = 128;
    TCCR0A |= _BV(COM0A1)|_BV(COM0A0)| _BV(WGM00) |_BV(COM0B1)|_BV(COM0B0);	//phase correct pwm; inverting
    inverting
    TCCR0B = 1<<CS00;								//gives pre-scaler of 256
    TCCR0B = 1<<CS01;														//gives pre-scaler of 8
    while(1);
	PORTB = _BV(PB3)|_BV(PB4);
	PORTB = _BV(PB3)|_BV(PB4);												// 
}

void _pwm_fwd_left(void)
{
	PORTB &= ~( _BV(PB2));
}

void _pwm_fwd_right(void)
{
	PORTB &= ~(_BV(PB1));
}

void _pwm_fwd(void)
{
	PORTB &= ~(_BV(PB1) | _BV(PB2));
}

void _pwm_rvs_left(void)
{
	PORTB |= (_BV(PB2));
}

void _pwm_fwd_right(void)
{
	PORTB &= ~(_BV(PB1));
}

void _pwm_fwd(void)
{
	PORTB &= ~(_BV(PB1) | _BV(PB2));
}

void _pwm_rvs_left(void)
{
	PORTB |= (_BV(PB2));
}

void _pwm_rvs_right(void)
{
	PORTB |= (_BV(PB1));
}

void _pwm_rvs(void)
{
	PORTB |= (_BV(PB1) | (_BV(PB2)));
}

void _pwm_left(void)
{
	_pwm_rvs_left();
	_pwm_fwd_right();
}

void _pwm_right(void)
{
	_pwm_rvs_right();
	_pwm_fwd_left();
}


/*
Truth Table Left Motor:
Black	White
In 1	In 2	Motor
High	High	OFF
High	PWM		OFF
PWM		High	FWD
PWM		PWM		RVS		(switch outputs)

Truth Table Right Motor:
Purple	Blue
In1		In2		Motor
High	High	OFF
High	PWM		OFF
PWM		High	RVS
PWM		PWM		FWD
*/
